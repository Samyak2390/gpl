<?xml version="1.0"?>
<doc>
    <assembly>
        <name>gpl</name>
    </assembly>
    <members>
        <member name="T:gpl.Compiler.SyntaxMap">
            <summary>
            Singleton class that initializes the hashmap storing key value pair of 
            available commands and its respective type.
            </summary>
        </member>
        <member name="M:gpl.Compiler.SyntaxMap.#ctor">
            <summary>
            Constructor that initializes Commands hashmap with available commands.
            </summary>
        </member>
        <member name="M:gpl.Compiler.SyntaxMap.GetSyntaxMap">
            <summary>
            Provides the instance of Singleton SyntaxMap.
            </summary>
            <returns>Instance of Singleton SyntaxMap.</returns>
        </member>
        <member name="M:gpl.Compiler.SyntaxMap.HasSyntax(System.String)">
            <summary>
            Checks whether the given string is a valid command.
            </summary>
            <param name="syntax">String to be checked for valid command.</param>
            <returns>true if command is valid, false otherwise.</returns>
        </member>
        <member name="M:gpl.Compiler.SyntaxMap.GetKind(System.String)">
            <summary>
            Provides the kind of the command.
            </summary>
            <param name="syntax">String for which kind is required.</param>
            <returns>Enum type of syntax kind.</returns>
        </member>
        <member name="T:gpl.Compiler.SyntaxKind">
            <summary>
            Enum type enumerating the type of available commands.
            </summary>
        </member>
        <member name="T:gpl.Compiler.Syntax.BadSyntax">
            <summary>
            Class that represents all the syntax that are not valid.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.BadSyntax.#ctor">
            <summary>
            Construtor to initialize the Syntax Kind.
            </summary>
        </member>
        <member name="T:gpl.Compiler.Syntax.CircleStatementSyntax">
            <summary>
            Class representing the syntax of circle command.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.CircleStatementSyntax.#ctor(gpl.Compiler.SyntaxKind,System.Int32)">
            <summary>
            Constructor initializing the kind of syntax and initializing its parameters.
            </summary>
            <param name="kind">Kind of the syntax</param>
            <param name="radius">Size of circle to be drawn.</param>
        </member>
        <member name="T:gpl.Compiler.Syntax.DrawToStatementSyntax">
            <summary>
            Class representing the syntax of drawto command
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.DrawToStatementSyntax.#ctor(gpl.Compiler.SyntaxKind,System.Int32[])">
            <summary>
            Constructor that initializes the command's parameters.
            </summary>
            <param name="kind">Syntax Kind</param>
            <param name="point">array of integers denoting a coordinate.</param>
        </member>
        <member name="T:gpl.Compiler.Syntax.BrushStatementSyntax">
            <summary>
            Class representing the brush command.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.BrushStatementSyntax.#ctor(gpl.Compiler.SyntaxKind,System.String)">
            <summary>
            Constructor initializing available colors.
            </summary>
            <param name="kind">Kind of syntax.</param>
            <param name="color">Type of color</param>
        </member>
        <member name="M:gpl.Compiler.Syntax.BrushStatementSyntax.GetColor(System.String)">
            <summary>
            Method to find and return color.
            </summary>
            <param name="color">Name of the color in string.</param>
            <returns>Color struct</returns>
        </member>
        <member name="T:gpl.Compiler.Syntax.FillStatementSyntax">
            <summary>
            Class representing the syntax of fill command.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.FillStatementSyntax.#ctor(gpl.Compiler.SyntaxKind,System.String)">
            <summary>
            Constructor initializing the command's parameters.
            </summary>
            <param name="kind">Syntax kind.</param>
            <param name="state">On or Off state of Fill command</param>
        </member>
        <member name="T:gpl.Compiler.Syntax.PenStatementSyntax">
            <summary>
            Class representing the pen command.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.PenStatementSyntax.#ctor(gpl.Compiler.SyntaxKind,System.String)">
            <summary>
            Constructor initializing pen command's parameters.
            </summary>
            <param name="kind">Syntax Kind</param>
            <param name="color">Name of the color in string.</param>
        </member>
        <member name="M:gpl.Compiler.Syntax.PenStatementSyntax.GetColor(System.String)">
            <summary>
            Method the provides the available color.
            </summary>
            <param name="color">Name of the color as a string.</param>
            <returns></returns>
        </member>
        <member name="T:gpl.Compiler.Syntax.RectangleStatementSyntax">
            <summary>
            Class representing the rectangle command.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.RectangleStatementSyntax.#ctor(gpl.Compiler.SyntaxKind,System.Int32[])">
            <summary>
            Constructor initializing the rectangle command's parameters.
            </summary>
            <param name="kind">Syntax Kind</param>
            <param name="size">Size (Width and Height) integer array.</param>
        </member>
        <member name="T:gpl.Compiler.Syntax.StatementSyntax">
            <summary>
            Abstract class representing all syntax commands with common property Kind.
            </summary>
        </member>
        <member name="T:gpl.Compiler.Syntax.MoveToStatementSyntax">
            <summary>
            Class representing the move to command.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.MoveToStatementSyntax.#ctor(gpl.Compiler.SyntaxKind,System.Int32[])">
            <summary>
            Constructor initializing the command's parameters.
            </summary>
            <param name="kind">Syntax kind</param>
            <param name="point">array of two integers acting as a coordinate.</param>
        </member>
        <member name="T:gpl.Compiler.Syntax.TriangleStatementSyntax">
            <summary>
            Class representing the syntax of triangle command.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Syntax.TriangleStatementSyntax.#ctor(gpl.Compiler.SyntaxKind,System.Drawing.Point[])">
            <summary>
            Constructor initializing triangle command's parameters
            </summary>
            <param name="kind">Syntax kind</param>
            <param name="vertices">Array of three vertices as Point</param>
        </member>
        <member name="T:gpl.Compiler.Validator">
            <summary>
            Class that validates the given command and returns the object of respective command
            if validation passes. Otherwise, returns the list of errors occured as a string.
            </summary>
        </member>
        <member name="F:gpl.Compiler.Validator._diagnostics">
            <summary>
            Stores any type of errors that occur while executing commands.
            </summary>
        </member>
        <member name="M:gpl.Compiler.Validator.#ctor(System.String[],System.Collections.ArrayList)">
            <summary>
            Constructor that initializes mappings of available commands and their types,
            along with the passed reference of diagnostics and array of command.
            </summary>
            <param name="tokens"></param>
            <param name="diagnostics"></param>
        </member>
        <member name="M:gpl.Compiler.Validator.Validate">
            <summary>
            Method that validates the given command stored in _tokens and returns the respective object of 
            type of command provided or adds errors to dianostic array list if validation fails.
            </summary>
            <returns></returns>
        </member>
        <member name="M:gpl.Compiler.Validator.GetPoint(System.String,System.String)">
            <summary>
            Method that checks if given strings are integers.
            </summary>
            <param name="X">X co-ordinate</param>
            <param name="Y">Y co-ordinate</param>
            <returns>Array of integers[X,Y].</returns>
        </member>
        <member name="M:gpl.Compiler.Validator.GetVertex(System.String,System.String)">
            <summary>
            Method that checks if given strings are integers.
            </summary>
            <param name="X">X co-ordinate</param>
            <param name="Y">Y co-ordinate</param>
            <returns>A Point object.</returns>
        </member>
        <member name="T:gpl.Form1">
            <summary>
            Main Form Class to initialize all components like textbox, picture box etc.
            It contains code for all event driven programmes.
            </summary>
        </member>
        <member name="F:gpl.Form1.diagnostics">
            <summary>
            Stores any type of errors that occur while executing commands.
            </summary>
        </member>
        <member name="M:gpl.Form1.#ctor">
            <summary>
            Constructor that initializes the form, makes a bitmap of picture box's size.
            </summary>
        </member>
        <member name="M:gpl.Form1.canvas_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event for the picture box - canvas.
            </summary>
            <param name="sender">Instance of object class</param>
            <param name="e">Pant event Arguments</param>
        </member>
        <member name="M:gpl.Form1.SingleCommand(System.String)">
            <summary>
            Method to execute the single worded commands.
            </summary>
            <param name="token">Command to be executed</param>
        </member>
        <member name="M:gpl.Form1.ProcessCommands">
            <summary>
            Method that executes multiline commands
            </summary>
        </member>
        <member name="M:gpl.Form1.ProcessCommand(System.String[])">
            <summary>
            Method that takes command and its parameters as an array, validates it and draws to canvas
            if there are no errors.
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="M:gpl.Form1.saveToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Click event that opens the file dialog that helps in choosing the location
            to save the code written in editor.
            </summary>
            <param name="sender">Instance of object class</param>
            <param name="e">Click Event Arguments</param>
        </member>
        <member name="M:gpl.Form1.loadFileToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary> 
            Click event that opens the file dialog that helps in choosing the location
            to load the text file in code editor.
            </summary>
            <param name="sender">Instance of object class</param>
            <param name="e">Click Event Arguments</param>
        </member>
        <member name="M:gpl.Form1.ParseCommand(System.String)">
            <summary>
            Takes a line of command and breaks it down to the array of tokens.
            </summary>
            <param name="rawCommand">A line of command</param>
            <returns>An array of string with expected commands and its parameters</returns>
        </member>
        <member name="M:gpl.Form1.cli_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key down event which is executed in press of Enter from keyboard.
            Decides which type of command to executes and shows errors from commands
            in message box.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:gpl.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:gpl.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:gpl.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:gpl.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:gpl.Visuals.Canvas">
            <summary>
            Class representing the canvas on which diagrams are drawn.
            </summary>
        </member>
        <member name="M:gpl.Visuals.Canvas.#ctor(System.Drawing.Graphics,System.Windows.Forms.PictureBox)">
            <summary>
            Constructor initializing the default parameters for canvas.
            </summary>
            <param name="graphics"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:gpl.Visuals.Canvas.MoveTo(System.Int32,System.Int32)">
            <summary>
            Implementation of moveto command that moves the position of pen using 
            given point
            </summary>
            <param name="X">X-coordinate of pen/brush</param>
            <param name="Y">Y-coordinate of pen/brush</param>
        </member>
        <member name="M:gpl.Visuals.Canvas.DrawTo(System.Int32,System.Int32)">
            <summary>
            Implementation of drawto command - draws a line between two points.
            </summary>
            <param name="X">X-coordinate</param>
            <param name="Y">Y-coordinate</param>
        </member>
        <member name="M:gpl.Visuals.Canvas.SetPen(System.Drawing.Color)">
            <summary>
            Implementation of pen command - set color for the pen
            </summary>
            <param name="color">Color of the pen</param>
        </member>
        <member name="M:gpl.Visuals.Canvas.SetBrush(System.Drawing.Color)">
            <summary>
            Implementation of the brush command - sets color for the brush command
            </summary>
            <param name="color">Color of the brush</param>
        </member>
        <member name="M:gpl.Visuals.Canvas.SetFillState(System.Boolean)">
            <summary>
            Implementation of the fill command - toggles the fill state
            </summary>
            <param name="state">Fill state</param>
        </member>
        <member name="P:gpl.Visuals.Canvas.GetSetGraphics">
            <summary>
            Getter and setter of graphics object
            </summary>
        </member>
        <member name="M:gpl.Visuals.Canvas.Draw(gpl.Compiler.Syntax.StatementSyntax)">
            <summary>
            Method that impoments draw command for various shapes.
            </summary>
            <param name="statement">Syntax for specific Shape</param>
        </member>
        <member name="T:gpl.Visuals.Painter">
            <summary>
            Class that directs specific syntax statements to their function implementation.
            </summary>
        </member>
        <member name="M:gpl.Visuals.Painter.#ctor(gpl.Visuals.Canvas,gpl.Compiler.Syntax.StatementSyntax)">
            <summary>
            Constructor to pass required parameters.
            </summary>
            <param name="canvas">Object of canvas</param>
            <param name="statement">Object of StatementSyntax class</param>
        </member>
        <member name="M:gpl.Visuals.Painter.Paint">
            <summary>
            Paint method that guides which function to call depending upon the type of 
            Syntax statement
            </summary>
        </member>
        <member name="T:gpl.Visuals.ShapeFactory">
            <summary>
            Factor class for Shape that returns the Shape object depending upon
            type of Syntax
            </summary>
        </member>
        <member name="T:gpl.Visuals.Shapes.CircleShape">
            <summary>
            Class representing the circle shape.
            </summary>
        </member>
        <member name="M:gpl.Visuals.Shapes.CircleShape.#ctor(gpl.Compiler.Syntax.CircleStatementSyntax,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Constructor to initialize circle command's parameters.
            </summary>
            <param name="circle">Syntax object of circle</param>
            <param name="graphics">Graphics object used to draw</param>
            <param name="state">Fill state</param>
        </member>
        <member name="M:gpl.Visuals.Shapes.CircleShape.Draw(System.Drawing.Pen,System.Drawing.SolidBrush,System.Int32,System.Int32)">
            <summary>
            Method that draws the circle shape.
            </summary>
            <param name="pen">Pen object</param>
            <param name="brush">Brush Object</param>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
        </member>
        <member name="T:gpl.Visuals.Shapes.RectangleShape">
            <summary>
            Class representing the rectangle shape.
            </summary>
        </member>
        <member name="M:gpl.Visuals.Shapes.RectangleShape.#ctor(gpl.Compiler.Syntax.RectangleStatementSyntax,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Constructor initializing the required parameters for drawing the rectangle.
            </summary>
            <param name="rectangle">Object of rectangle syntax</param>
            <param name="graphics">Graphics object used to draw rectangle</param>
            <param name="state">Fill state</param>
        </member>
        <member name="M:gpl.Visuals.Shapes.RectangleShape.Draw(System.Drawing.Pen,System.Drawing.SolidBrush,System.Int32,System.Int32)">
            <summary>
            Method used to draw rectangle.
            </summary>
            <param name="pen">Pen Object</param>
            <param name="brush">SolidBrush object</param>
            <param name="X">X-Coordinate</param>
            <param name="Y">Y-Coordinate</param>
        </member>
        <member name="T:gpl.Visuals.Shapes.Shape">
            <summary>
            Abstract class representing all the available shapes
            </summary>
        </member>
        <member name="T:gpl.Visuals.Shapes.TriangleShape">
            <summary>
            Class representing the syntax of triangle command.
            </summary>
        </member>
        <member name="M:gpl.Visuals.Shapes.TriangleShape.#ctor(gpl.Compiler.Syntax.TriangleStatementSyntax,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Constructor that initializes the required parameters for traingle command.
            </summary>
            <param name="triangle">Object of Triangle Syntax</param>
            <param name="graphics">Object of graphics.</param>
            <param name="state">Fill State</param>
        </member>
        <member name="M:gpl.Visuals.Shapes.TriangleShape.Draw(System.Drawing.Pen,System.Drawing.SolidBrush,System.Int32,System.Int32)">
            <summary>
            Method to draw Triangle.
            </summary>
            <param name="pen">Pen object</param>
            <param name="brush">SolidBrush object</param>
            <param name="X">X-coordinate</param>
            <param name="Y">Y-coordinate</param>
        </member>
        <member name="T:gpl.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:gpl.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:gpl.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
